가의_코드포인트: @문자열 "가"의 코드포인트
힣의_코드포인트: @문자열 "힣"의 코드포인트

초성목록: ['ㄱ', 'ㄲ', 'ㄴ', 'ㄷ', 'ㄸ', 'ㄹ', 'ㅁ', 'ㅂ', 'ㅃ', 'ㅅ', 'ㅆ', 'ㅇ', 'ㅈ', 'ㅉ', 'ㅊ', 'ㅋ', 'ㅌ', 'ㅍ', 'ㅎ']
중성목록: ['ㅏ', 'ㅐ', 'ㅑ', 'ㅒ', 'ㅓ', 'ㅔ', 'ㅕ', 'ㅖ', 'ㅗ', 'ㅘ', 'ㅙ', 'ㅚ', 'ㅛ', 'ㅜ', 'ㅝ', 'ㅞ', 'ㅟ', 'ㅠ', 'ㅡ', 'ㅢ', 'ㅣ']
종성목록: ['', 'ㄱ', 'ㄲ', 'ㄳ', 'ㄴ', 'ㄵ', 'ㄶ', 'ㄷ', 'ㄹ', 'ㄺ', 'ㄻ', 'ㄼ', 'ㄽ', 'ㄾ', 'ㄿ', 'ㅀ', 'ㅁ', 'ㅂ', 'ㅄ', 'ㅅ', 'ㅆ', 'ㅇ', 'ㅈ', 'ㅊ', 'ㅋ', 'ㅌ', 'ㅍ', 'ㅎ']
인자개수목록: [0, 0, 2, 2, 2, 2, 1, 0, 1, 0, 1, 0, 2, 0, 1, 0, 2, 2, 0]
가로속력목록: [1, (), 2, (), -1, (), -2, (), 0, (), (), (), 0, 0, (), (), (), 0, (), '반사', '반사']
세로속력목록: [0, (), 0, (), 0, (), 0, (), -1, (), (), (), -2, 1, (), (), (), 2, '반사', '반사', ()]
받침획수목록: [0, 2, 4, 4, 2, 5, 5, 3, 5, 7, 9, 9, 7, 9, 9, 8, 4, 4, 6, 2, 4, 1, 3, 4, 3, 4, 4, 3]

약속 (문자)이/가 아희 코드
    코드포인트: @문자열 문자의 코드포인트
    만약 코드포인트 >= 가의_코드포인트 이고 코드포인트 <= 힣의_코드포인트 이라면
        결과: 참
    아니라면
        결과: 거짓

약속 (문자)이/가 아희 코드가 아님
    만약 문자가 아희 코드 이라면
        결과: 거짓
    아니라면
        결과: 참

약속 (문자)의 초성인덱스
    만약 문자가 아희 코드가 아님 이라면
        결과: 0
        약속 그만
    음절코드: (@문자열 문자의 코드포인트) - 가의_코드포인트
    결과: (@숫자 (음절코드 / 588) 소수점 아래 버림) + 1

약속 (문자)의 중성인덱스
    만약 문자가 아희 코드가 아님 이라면
        결과: 0
        약속 그만
    음절코드: (@문자열 문자의 코드포인트) - 가의_코드포인트
    결과: ((@숫자 (음절코드 / 28) 소수점 아래 버림) % 21) + 1

약속 (문자)의 종성인덱스
    만약 문자가 아희 코드가 아님 이라면
        결과: 0
        약속 그만
    음절코드: (@문자열 문자의 코드포인트) - 가의_코드포인트
    결과: (@숫자 (음절코드 % 28) 소수점 아래 버림) + 1

약속 (문자열)로부터/으로부터 코드공간 생성
    줄목록: @문자열 문자열 줄바꿈마다 쪼개기
    반복 (1~줄목록.길이)의 인덱스 마다
        줄목록[인덱스]: @문자열 줄목록[인덱스] 글자마다 쪼개기
    반복 (줄목록)의 줄 마다
        반복 (1~줄.길이)의 인덱스 마다
            문자: 줄[인덱스]
            초성인덱스: 문자의 초성인덱스
            중성인덱스: 문자의 중성인덱스
            종성인덱스: 문자의 종성인덱스
            줄[인덱스]: {
                문자: 문자,
                초성인덱스: 초성인덱스,
                중성인덱스: 중성인덱스,
                종성인덱스: 종성인덱스,
                초성: 초성목록[초성인덱스],
                중성: 중성목록[중성인덱스],
                종성: 종성목록[종성인덱스],
    # <del> 어떤마술: 금서목록[    인덱스] </del>
            }
    결과: 줄목록

약속 (코드공간)에서 (커서)가 가르키는 코드
    줄: 코드공간[커서.행]
    만약 줄 = () 이면
        결과: ()
    아니면
        결과: 줄[커서.열]

약속 (커서) 반사
    커서.가로속력: -커서.가로속력
    커서.세로속력: -커서.세로속력

약속 (커서) 회전 (중성인덱스)
    가로속력: 가로속력목록[중성인덱스]
    세로속력: 세로속력목록[중성인덱스]
    만약 세로속력 = '반사' 이면
        커서.세로속력: -커서.세로속력
    아니면서 세로속력 = () 이면
        ()
    아니면
        커서.세로속력: 세로속력
    만약 가로속력 = '반사' 이면
        커서.가로속력: -커서.가로속력
    아니면서 가로속력 = () 이면
        ()
    아니면
        커서.가로속력: 가로속력

약속 (코드공간)에서 (커서)를 다음 위치로 이동시키기
    커서.행: 커서.행 + 커서.세로속력
    커서.열: 커서.열 + 커서.가로속력
    줄: 코드공간[커서.행]
    만약 줄 = () 이면
        너비: 0
    아니면
        너비: 줄.길이
    높이: 코드공간.길이
    만약 커서.열 < 1 이고 커서.가로속력 < 0 이면
        커서.열: 너비
    만약 커서.열 > 너비 이고 커서.가로속력 > 0 이면
        커서.열: 1
    만약 커서.행 < 1 이고 커서.세로속력 < 0 이면
        커서.행: 높이
    만약 커서.행 > 높이 이고 커서.세로속력 > 0 이면
        커서.행: 1

약속 (아희코드) 실행
    저장공간목록: []
    반복 종성목록 의 종성 마다
        만약 종성 = 'ㅇ' 이거나 종성 = 'ㅎ' 이라면
            저장공간: @저장공간 큐 생성
        아니라면
            저장공간: @저장공간 스택 생성
        @배열 저장공간목록의 끝에 저장공간 넣기
    현재저장공간: 저장공간목록[1]
    # 세로속력은 행에 영향을 주고, 가로속력은 열에 영향을 줍니다.
    커서: { 행: 1, 열: 1, 세로속력: 1, 가로속력: 0 }
    코드공간: 아희코드로부터 코드공간 생성
    반복
        코드: 코드공간에서 커서가 가르키는 코드
        만약 코드 = () 또는 코드.초성인덱스 = 0 이면
            ()
        아니면서 현재저장공간.내용.길이 < 인자개수목록[코드.초성인덱스] 이면
            커서 회전 코드.중성인덱스
            커서 반사
        아니면
            커서 회전 코드.중성인덱스
            # 'ㅇ' 묶음
            만약 코드.초성 = 'ㅇ' 이면
                ()
            아니면서 코드.초성 = 'ㅎ' 이면
                반복 그만
            # 'ㄷ' 묶음
            아니면서 코드.초성 = 'ㄷ' 이면
                가: 현재저장공간.뽑기 호출하기
                나: 현재저장공간.뽑기 호출하기
                현재저장공간.집어넣기 호출하기 ([@숫자 (나 + 가) 소수점 아래 버림])
            아니면서 코드.초성 = 'ㄸ' 이면
                가: 현재저장공간.뽑기 호출하기
                나: 현재저장공간.뽑기 호출하기
                현재저장공간.집어넣기 호출하기 ([@숫자 (나 * 가) 소수점 아래 버림])
            아니면서 코드.초성 = 'ㅌ' 이면
                가: 현재저장공간.뽑기 호출하기
                나: 현재저장공간.뽑기 호출하기
                현재저장공간.집어넣기 호출하기 ([@숫자 (나 - 가) 소수점 아래 버림])
            아니면서 코드.초성 = 'ㄴ' 이면
                가: 현재저장공간.뽑기 호출하기
                나: 현재저장공간.뽑기 호출하기
                현재저장공간.집어넣기 호출하기 ([@숫자 (나 / 가) 소수점 아래 버림])
            아니면서 코드.초성 = 'ㄹ' 이면
                가: 현재저장공간.뽑기 호출하기
                나: 현재저장공간.뽑기 호출하기
                현재저장공간.집어넣기 호출하기 ([@숫자 (나 % 가) 소수점 아래 버림])
            # 'ㅁ' 묶음
            아니면서 코드.초성 = 'ㅁ' 이면
                만약 코드.종성 = 'ㅇ' 이면
                    @입출력 표준출력에 (현재저장공간.뽑기 호출하기) 쓰기
                아니면서 만약 코드.종성 = 'ㅎ' 이면
                    @입출력 표준출력에 (@문자열 (현재저장공간.뽑기 호출하기)에 해당하는 문자) 쓰기
            아니면서 코드.초성 = 'ㅂ' 이면
                만약 코드.종성 = 'ㅇ' 이면
                    현재저장공간.집어넣기 호출하기 ([0]) # 아몰랑
                아니면서 만약 코드.종성 = 'ㅎ' 이면
                    현재저장공간.집어넣기 호출하기 ([0]) # 귀찮아
                아니면
                    현재저장공간.집어넣기 호출하기 ([받침획수목록[코드.종성인덱스]])
            아니면서 코드.초성 = 'ㅃ' 이면
                현재저장공간.중복 호출하기
            아니면서 코드.초성 = 'ㅍ' 이면
                현재저장공간.바꿔치기 호출하기
            # 'ㅅ' 묶음
            아니면서 코드.초성 = 'ㅅ' 이면
                현재저장공간: 저장공간목록[코드.종성인덱스]
            아니면서 코드.초성 = 'ㅆ' 이면
                저장공간목록[코드.종성인덱스].집어넣기 호출하기([현재저장공간.뽑기 호출하기])
            아니면서 코드.초성 = 'ㅈ' 이면
                만약 (현재저장공간.뽑기 호출하기) <= (현재저장공간.뽑기 호출하기) 이면
                    현재저장공간.집어넣기 호출하기 ([1])
                아니면
                    현재저장공간.집어넣기 호출하기 ([0])
            아니면서 코드.초성 = 'ㅊ' 이면
                만약 (현재저장공간.뽑기 호출하기) = 0 이면
                    커서 반사
        코드공간에서 커서를 다음 위치로 이동시키기
    만약 현재저장공간.내용.길이 > 0 이면
        결과: 현재저장공간.뽑기 호출하기
    아니면
        결과: 0
